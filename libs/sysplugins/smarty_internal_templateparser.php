<?php

class TP_yyToken implements ArrayAccess
{
    public $string = '';

    public $metadata = array();

    public function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    public function __toString()
    {
        return $this->string;
    }

    public function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    public function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    public function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ? $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);

                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
}

;

#line 13 "../smarty/lexer/smarty_internal_templateparser.y"

/**
 * Smarty Internal Plugin Templateparser
 *
 * This is the template parser.
 * It is generated from the smarty_internal_templateparser.y file
 *
 * @package    Smarty
 * @subpackage Compiler
 * @author     Uwe Tews
 */
class Smarty_Internal_Templateparser
{
    #line 26 "../smarty/lexer/smarty_internal_templateparser.y"

    const Err1 = "Security error: Call to private object member not allowed";

    const Err2 = "Security error: Call to dynamic object member not allowed";

    const Err3 = "PHP in template not allowed. Use SmartyBC to enable it";

    /**
     * result status
     *
     * @var bool
     */
    public $successful = true;

    /**
     * return value
     *
     * @var mixed
     */
    public $retvalue = 0;

    /**
     * counter for prefix code
     *
     * @var int
     */
    public static $prefix_number = 0;

    /**
     * @var
     */
    public $yymajor;

    /**
     * last index of array variable
     *
     * @var mixed
     */
    public $last_index;

    /**
     * last variable name
     *
     * @var string
     */
    public $last_variable;

    /**
     * root parse tree buffer
     *
     * @var Smarty_Internal_ParseTree
     */
    public $root_buffer;

    /**
     * current parse tree object
     *
     * @var Smarty_Internal_ParseTree
     */
    public $current_buffer;

    /**
     * lexer object
     *
     * @var Smarty_Internal_Templatelexer
     */
    private $lex;

    /**
     * internal error flag
     *
     * @var bool
     */
    private $internalError = false;

    /**
     * {strip} status
     *
     * @var bool
     */
    public $strip = false;

    /**
     * compiler object
     *
     * @var Smarty_Internal_TemplateCompilerBase
     */
    public $compiler = null;

    /**
     * smarty object
     *
     * @var Smarty
     */
    public $smarty = null;

    /**
     * template object
     *
     * @var Smarty_Internal_Template
     */
    public $template = null;

    /**
     * block nesting level
     *
     * @var int
     */
    public $block_nesting_level = 0;

    /**
     * security object
     *
     * @var Smarty_Security
     */
    private $security = null;

    /**
     * constructor
     *
     * @param Smarty_Internal_Templatelexer        $lex
     * @param Smarty_Internal_TemplateCompilerBase $compiler
     */
    function __construct(Smarty_Internal_Templatelexer $lex, Smarty_Internal_TemplateCompilerBase $compiler)
    {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->template = $this->compiler->template;
        $this->smarty = $this->template->smarty;
        $this->security = isset($this->smarty->security_policy) ? $this->smarty->security_policy : false;
        $this->current_buffer = $this->root_buffer = new Smarty_Internal_ParseTree_Template($this);
    }

    /**
     * insert PHP code in current buffer
     *
     * @param string $code
     */
    public function insertPhpCode($code)
    {
        $this->current_buffer->append_subtree(new Smarty_Internal_ParseTree_Tag($this, $code));
    }

    /**
     *  merge PHP code with prefix code and return parse tree tag object
     *
     * @param string $code
     *
     * @return Smarty_Internal_ParseTree_Tag
     */
    public function mergePrefixCode($code)
    {
        $tmp = '';
        foreach ($this->compiler->prefix_code as $preCode) {
            $tmp = empty($tmp) ? $preCode : $this->compiler->appendCode($tmp, $preCode);
        }
        $this->compiler->prefix_code = array();
        $tmp = empty($tmp) ? $code : $this->compiler->appendCode($tmp, $code);
        return new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp, true));
    }

    const TP_VERT = 1;

    const TP_COLON = 2;

    const TP_PHP = 3;

    const TP_NOCACHE = 4;

    const TP_TEXT = 5;

    const TP_STRIPON = 6;

    const TP_STRIPOFF = 7;

    const TP_BLOCKSOURCE = 8;

    const TP_LITERALSTART = 9;

    const TP_LITERALEND = 10;

    const TP_LITERAL = 11;

    const TP_RDEL = 12;

    const TP_SIMPELOUTPUT = 13;

    const TP_LDEL = 14;

    const TP_DOLLARID = 15;

    const TP_EQUAL = 16;

    const TP_SIMPLETAG = 17;

    const TP_ID = 18;

    const TP_PTR = 19;

    const TP_LDELIF = 20;

    const TP_LDELFOR = 21;

    const TP_SEMICOLON = 22;

    const TP_INCDEC = 23;

    const TP_TO = 24;

    const TP_STEP = 25;

    const TP_LDELFOREACH = 26;

    const TP_SPACE = 27;

    const TP_AS = 28;

    const TP_APTR = 29;

    const TP_LDELSETFILTER = 30;

    const TP_SMARTYBLOCKCHILDPARENT = 31;

    const TP_CLOSETAG = 32;

    const TP_LDELSLASH = 33;

    const TP_ATTR = 34;

    const TP_INTEGER = 35;

    const TP_COMMA = 36;

    const TP_OPENP = 37;

    const TP_CLOSEP = 38;

    const TP_MATH = 39;

    const TP_UNIMATH = 40;

    const TP_ISIN = 41;

    const TP_INSTANCEOF = 42;

    const TP_QMARK = 43;

    const TP_NOT = 44;

    const TP_TYPECAST = 45;

    const TP_HEX = 46;

    const TP_DOT = 47;

    const TP_SINGLEQUOTESTRING = 48;

    const TP_DOUBLECOLON = 49;

    const TP_NAMESPACE = 50;

    const TP_AT = 51;

    const TP_HATCH = 52;

    const TP_OPENB = 53;

    const TP_CLOSEB = 54;

    const TP_DOLLAR = 55;

    const TP_LOGOP = 56;

    const TP_TLOGOP = 57;

    const TP_SINGLECOND = 58;

    const TP_QUOTE = 59;

    const TP_BACKTICK = 60;

    const YY_NO_ACTION = 535;

    const YY_ACCEPT_ACTION = 534;

    const YY_ERROR_ACTION = 533;

    const YY_SZ_ACTTAB = 2006;

    static public $yy_action = array(293, 9, 133, 451, 279, 67, 317, 5, 84, 265, 20, 222, 98, 118, 268, 451, 450, 219,
        300, 261, 237, 15, 228, 14, 28, 162, 450, 42, 450, 450, 16, 40, 41, 270, 226, 299, 220, 216, 450, 81, 1, 450,
        305, 253, 85, 313, 52, 293, 9, 131, 208, 279, 201, 6, 5, 84, 265, 20, 92, 154, 118, 268, 191, 303, 219, 112,
        261, 237, 266, 209, 14, 28, 161, 269, 42, 101, 14, 16, 40, 41, 270, 226, 238, 16, 216, 193, 81, 1, 247, 305,
        189, 150, 177, 52, 293, 9, 135, 208, 279, 211, 266, 5, 84, 19, 327, 91, 146, 118, 307, 208, 315, 219, 24, 261,
        237, 266, 228, 193, 28, 269, 368, 42, 157, 14, 267, 40, 41, 270, 226, 299, 16, 216, 193, 81, 1, 7, 305, 189,
        177, 2, 52, 293, 9, 134, 208, 279, 211, 196, 5, 84, 19, 327, 93, 148, 118, 360, 294, 310, 219, 295, 261, 237,
        266, 228, 193, 28, 269, 182, 42, 106, 14, 263, 40, 41, 270, 226, 299, 16, 216, 193, 81, 1, 171, 305, 139, 177,
        337, 52, 293, 9, 136, 266, 279, 211, 193, 5, 84, 265, 20, 97, 152, 118, 268, 267, 241, 219, 94, 261, 237, 266,
        228, 14, 31, 136, 269, 42, 242, 37, 16, 40, 41, 270, 226, 299, 305, 216, 193, 81, 1, 186, 305, 90, 153, 177, 52,
        293, 9, 135, 208, 279, 211, 266, 5, 84, 19, 327, 265, 20, 118, 408, 81, 268, 219, 305, 261, 237, 193, 198, 193,
        28, 12, 264, 42, 101, 408, 164, 40, 41, 270, 226, 299, 408, 216, 14, 81, 1, 30, 305, 189, 179, 16, 52, 293, 9,
        135, 208, 279, 199, 266, 5, 84, 19, 327, 110, 23, 118, 405, 101, 208, 219, 252, 261, 237, 233, 213, 193, 28,
        227, 123, 42, 318, 405, 103, 40, 41, 270, 226, 299, 405, 216, 160, 81, 1, 260, 305, 189, 175, 110, 52, 293, 9,
        135, 96, 279, 202, 266, 5, 84, 19, 327, 305, 158, 118, 225, 218, 212, 219, 105, 261, 237, 266, 228, 193, 28,
        208, 37, 42, 180, 297, 291, 40, 41, 270, 226, 299, 149, 216, 196, 81, 1, 330, 305, 189, 174, 266, 52, 293, 9,
        132, 208, 279, 211, 266, 5, 84, 19, 327, 479, 479, 118, 402, 196, 479, 219, 11, 261, 237, 170, 228, 193, 4, 16,
        331, 42, 26, 14, 266, 40, 41, 270, 226, 299, 16, 216, 190, 81, 1, 232, 305, 189, 151, 184, 52, 293, 9, 135, 208,
        279, 197, 266, 5, 84, 19, 327, 317, 463, 118, 408, 137, 222, 219, 463, 261, 237, 10, 228, 193, 28, 193, 264, 42,
        145, 408, 267, 40, 41, 270, 226, 299, 408, 216, 3, 81, 1, 27, 305, 244, 269, 229, 52, 293, 9, 136, 308, 279,
        211, 187, 5, 84, 479, 479, 227, 26, 118, 479, 463, 177, 219, 258, 261, 237, 27, 228, 306, 31, 225, 249, 42, 332,
        105, 463, 40, 41, 270, 226, 299, 463, 216, 27, 81, 256, 217, 305, 463, 406, 463, 52, 479, 231, 463, 285, 284,
        282, 283, 289, 290, 180, 208, 22, 406, 293, 9, 181, 303, 279, 281, 406, 5, 84, 450, 265, 20, 95, 118, 168, 268,
        269, 219, 115, 261, 237, 450, 169, 323, 286, 287, 288, 234, 222, 205, 222, 266, 119, 71, 116, 39, 43, 38, 103,
        265, 20, 275, 334, 267, 268, 210, 278, 325, 221, 260, 479, 479, 329, 335, 336, 479, 323, 320, 101, 215, 312,
        222, 205, 208, 125, 121, 66, 116, 7, 35, 223, 103, 208, 155, 275, 334, 272, 230, 210, 278, 325, 251, 260, 363,
        173, 323, 137, 83, 479, 207, 222, 205, 10, 266, 121, 48, 108, 114, 14, 140, 103, 227, 143, 275, 334, 16, 159,
        210, 278, 325, 305, 260, 323, 208, 101, 266, 321, 222, 205, 163, 33, 121, 66, 116, 147, 225, 224, 103, 266, 105,
        275, 334, 196, 266, 210, 278, 325, 323, 260, 305, 267, 29, 222, 205, 110, 206, 121, 66, 116, 172, 196, 109, 103,
        25, 200, 275, 334, 273, 266, 210, 278, 325, 323, 260, 208, 178, 183, 222, 205, 105, 214, 119, 71, 116, 298, 374,
        271, 103, 188, 303, 275, 334, 236, 165, 210, 278, 325, 262, 260, 120, 14, 326, 266, 193, 305, 208, 323, 16, 125,
        311, 450, 222, 205, 21, 267, 121, 58, 108, 224, 248, 250, 103, 450, 240, 275, 334, 176, 274, 210, 278, 325, 323,
        260, 194, 34, 266, 222, 205, 246, 185, 121, 44, 116, 319, 292, 23, 103, 277, 276, 275, 334, 141, 196, 210, 278,
        325, 323, 260, 245, 144, 280, 222, 205, 271, 142, 121, 63, 116, 167, 156, 138, 103, 87, 296, 275, 334, 267, 117,
        210, 278, 325, 323, 260, 86, 302, 107, 222, 205, 333, 302, 99, 61, 116, 302, 88, 302, 103, 302, 89, 275, 334,
        302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 55, 116, 302, 302, 302, 103, 302,
        302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 102, 72, 116, 302, 302,
        302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 80,
        116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302,
        302, 121, 70, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302,
        222, 205, 302, 302, 100, 73, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 314, 210, 278, 325, 302, 260,
        302, 302, 293, 8, 316, 302, 279, 302, 302, 5, 84, 302, 302, 302, 302, 118, 302, 302, 302, 219, 323, 261, 237,
        302, 302, 222, 205, 302, 302, 121, 50, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325,
        323, 260, 302, 301, 17, 222, 204, 302, 302, 121, 53, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 314, 210,
        278, 325, 302, 260, 302, 302, 293, 8, 316, 302, 279, 302, 302, 5, 84, 302, 302, 302, 302, 118, 302, 302, 302,
        219, 323, 261, 237, 302, 302, 222, 205, 302, 302, 111, 47, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302,
        302, 210, 278, 325, 323, 260, 302, 302, 17, 222, 205, 302, 302, 121, 49, 116, 302, 302, 302, 103, 302, 302, 275,
        334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 76, 116, 302, 302, 302, 103,
        302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 75, 116, 302,
        302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121,
        62, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205,
        302, 302, 121, 59, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302,
        302, 222, 205, 302, 302, 121, 56, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323,
        260, 302, 302, 302, 222, 77, 302, 302, 82, 46, 104, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278,
        325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 60, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302,
        302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 79, 302, 302, 82, 45, 104, 302, 302, 302, 103, 302, 302, 275,
        334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 68, 116, 302, 302, 302, 103,
        302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 65, 116, 302,
        302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121,
        57, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205,
        302, 302, 121, 78, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302,
        302, 222, 205, 302, 302, 121, 69, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323,
        260, 302, 302, 302, 222, 205, 302, 302, 121, 64, 116, 302, 302, 302, 103, 302, 302, 275, 334, 302, 302, 210,
        278, 325, 323, 260, 302, 302, 302, 222, 203, 302, 302, 113, 54, 116, 302, 302, 302, 103, 302, 302, 275, 334,
        302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 58, 116, 302, 302, 302, 103, 302,
        302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 205, 302, 302, 121, 74, 116, 302, 302,
        302, 103, 302, 302, 275, 334, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 235, 302, 302, 124, 302,
        116, 302, 302, 302, 103, 302, 208, 302, 324, 302, 208, 210, 278, 325, 323, 260, 302, 304, 302, 222, 235, 302,
        302, 130, 302, 116, 302, 302, 302, 103, 302, 302, 14, 254, 418, 418, 210, 278, 325, 16, 260, 302, 302, 302, 39,
        43, 38, 255, 39, 43, 38, 534, 51, 243, 287, 288, 234, 302, 302, 222, 302, 329, 335, 336, 229, 329, 335, 336,
        302, 302, 450, 302, 418, 418, 418, 479, 479, 302, 36, 302, 479, 463, 450, 229, 208, 39, 43, 38, 302, 418, 418,
        418, 302, 302, 479, 479, 302, 302, 302, 479, 463, 302, 329, 335, 336, 302, 302, 302, 32, 463, 14, 463, 302, 479,
        302, 463, 302, 16, 302, 302, 302, 302, 39, 43, 38, 302, 302, 302, 463, 302, 463, 302, 479, 302, 463, 322, 302,
        302, 323, 329, 335, 336, 302, 222, 235, 302, 302, 127, 302, 116, 302, 302, 302, 103, 302, 302, 302, 412, 302,
        302, 210, 278, 325, 302, 260, 323, 302, 412, 302, 412, 222, 235, 412, 302, 128, 302, 116, 302, 302, 412, 103,
        412, 302, 412, 302, 302, 302, 210, 278, 325, 323, 260, 227, 302, 302, 222, 235, 302, 302, 126, 302, 116, 302,
        302, 302, 103, 302, 302, 302, 302, 302, 302, 210, 278, 325, 323, 260, 302, 302, 302, 222, 235, 302, 302, 122,
        302, 116, 302, 302, 302, 103, 302, 208, 302, 302, 302, 302, 210, 278, 325, 323, 260, 208, 302, 302, 222, 235,
        302, 302, 129, 302, 116, 302, 259, 302, 103, 302, 302, 14, 302, 302, 302, 210, 278, 325, 16, 260, 229, 302, 302,
        39, 43, 38, 302, 13, 302, 302, 302, 479, 479, 39, 43, 38, 479, 463, 479, 479, 329, 335, 336, 479, 463, 208, 302,
        302, 302, 302, 329, 335, 336, 208, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 463, 302, 463, 302,
        479, 302, 463, 463, 302, 463, 302, 479, 302, 463, 302, 166, 302, 239, 39, 43, 38, 208, 302, 302, 302, 302, 39,
        43, 38, 208, 302, 302, 192, 302, 302, 329, 335, 336, 302, 302, 257, 302, 302, 329, 335, 336, 302, 302, 302, 302,
        302, 302, 302, 302, 302, 302, 302, 479, 479, 39, 43, 38, 479, 463, 208, 302, 302, 39, 43, 38, 208, 18, 302, 208,
        302, 302, 329, 335, 336, 302, 302, 302, 302, 302, 329, 335, 336, 302, 302, 302, 302, 463, 302, 463, 302, 479,
        302, 463, 302, 208, 302, 302, 39, 43, 38, 208, 302, 302, 39, 43, 38, 39, 43, 38, 302, 302, 195, 302, 302, 329,
        335, 336, 302, 309, 302, 329, 335, 336, 329, 335, 336, 302, 302, 302, 302, 302, 302, 39, 43, 38, 302, 302, 302,
        39, 43, 38, 302, 302, 302, 302, 302, 302, 328, 302, 329, 335, 336, 302, 302, 302, 329, 335, 336,);

    static public $yy_lookahead = array(13, 14, 15, 37, 17, 18, 65, 20, 21, 13, 14, 70, 81, 26, 18, 49, 37, 30, 31, 32,
        33, 29, 35, 27, 37, 29, 37, 40, 49, 37, 34, 44, 45, 46, 47, 48, 47, 50, 49, 52, 53, 49, 55, 54, 103, 104, 59,
        13, 14, 15, 1, 17, 18, 37, 20, 21, 13, 14, 72, 73, 26, 18, 95, 96, 30, 49, 32, 33, 82, 35, 27, 37, 29, 23, 40,
        19, 27, 34, 44, 45, 46, 47, 48, 34, 50, 99, 52, 53, 54, 55, 72, 73, 42, 59, 13, 14, 15, 1, 17, 18, 82, 20, 21,
        85, 86, 72, 73, 26, 12, 1, 60, 30, 14, 32, 33, 82, 35, 99, 37, 23, 12, 40, 92, 27, 94, 44, 45, 46, 47, 48, 34,
        50, 99, 52, 53, 37, 55, 72, 42, 36, 59, 13, 14, 15, 1, 17, 18, 99, 20, 21, 85, 86, 72, 73, 26, 12, 66, 54, 30,
        69, 32, 33, 82, 35, 99, 37, 23, 72, 40, 80, 27, 18, 44, 45, 46, 47, 48, 34, 50, 99, 52, 53, 73, 55, 15, 42, 97,
        59, 13, 14, 15, 82, 17, 18, 99, 20, 21, 13, 14, 72, 73, 26, 18, 94, 51, 30, 37, 32, 33, 82, 35, 27, 37, 15, 23,
        40, 18, 2, 34, 44, 45, 46, 47, 48, 55, 50, 99, 52, 53, 72, 55, 72, 73, 42, 59, 13, 14, 15, 1, 17, 18, 82, 20,
        21, 85, 86, 13, 14, 26, 12, 52, 18, 30, 55, 32, 33, 99, 35, 99, 37, 16, 100, 40, 19, 27, 28, 44, 45, 46, 47, 48,
        34, 50, 27, 52, 53, 16, 55, 72, 73, 34, 59, 13, 14, 15, 1, 17, 18, 82, 20, 21, 85, 86, 49, 16, 26, 12, 19, 1,
        30, 15, 32, 33, 71, 35, 99, 37, 47, 76, 40, 96, 27, 80, 44, 45, 46, 47, 48, 34, 50, 92, 52, 53, 91, 55, 72, 73,
        49, 59, 13, 14, 15, 92, 17, 18, 82, 20, 21, 85, 86, 55, 73, 26, 76, 77, 78, 30, 80, 32, 33, 82, 35, 99, 37, 1,
        2, 40, 9, 10, 11, 44, 45, 46, 47, 48, 73, 50, 99, 52, 53, 18, 55, 72, 73, 82, 59, 13, 14, 15, 1, 17, 18, 82, 20,
        21, 85, 86, 13, 14, 26, 12, 99, 18, 30, 27, 32, 33, 73, 35, 99, 37, 34, 50, 40, 16, 27, 82, 44, 45, 46, 47, 48,
        34, 50, 15, 52, 53, 18, 55, 72, 73, 72, 59, 13, 14, 15, 1, 17, 18, 82, 20, 21, 85, 86, 65, 47, 26, 12, 47, 70,
        30, 53, 32, 33, 53, 35, 99, 37, 99, 100, 40, 92, 27, 94, 44, 45, 46, 47, 48, 34, 50, 37, 52, 53, 36, 55, 38, 23,
        2, 59, 13, 14, 15, 104, 17, 18, 81, 20, 21, 13, 14, 47, 16, 26, 18, 19, 42, 30, 54, 32, 33, 36, 35, 38, 37, 76,
        77, 40, 54, 80, 47, 44, 45, 46, 47, 48, 53, 50, 36, 52, 38, 18, 55, 47, 12, 49, 59, 51, 16, 53, 3, 4, 5, 6, 7,
        8, 9, 1, 22, 27, 13, 14, 95, 96, 17, 5, 34, 20, 21, 37, 13, 14, 36, 26, 52, 18, 23, 30, 22, 32, 33, 49, 73, 65,
        64, 65, 66, 67, 70, 71, 70, 82, 74, 75, 76, 39, 40, 41, 80, 13, 14, 83, 84, 94, 18, 87, 88, 89, 51, 91, 13, 14,
        56, 57, 58, 18, 65, 90, 19, 101, 102, 70, 71, 1, 97, 74, 75, 76, 37, 14, 15, 80, 1, 18, 83, 84, 18, 51, 87, 88,
        89, 18, 91, 12, 73, 65, 47, 18, 51, 98, 70, 71, 53, 82, 74, 75, 76, 77, 27, 15, 80, 47, 52, 83, 84, 34, 73, 87,
        88, 89, 55, 91, 65, 1, 19, 82, 54, 70, 71, 73, 43, 74, 75, 76, 73, 76, 77, 80, 82, 80, 83, 84, 99, 82, 87, 88,
        89, 65, 91, 55, 94, 29, 70, 71, 49, 98, 74, 75, 76, 73, 99, 18, 80, 14, 15, 83, 84, 18, 82, 87, 88, 89, 65, 91,
        1, 76, 72, 70, 71, 80, 98, 74, 75, 76, 35, 12, 93, 80, 95, 96, 83, 84, 19, 73, 87, 88, 89, 18, 91, 18, 27, 90,
        82, 99, 55, 1, 65, 34, 97, 102, 37, 70, 71, 16, 94, 74, 75, 76, 77, 54, 23, 80, 49, 19, 83, 84, 73, 18, 87, 88,
        89, 65, 91, 18, 24, 82, 70, 71, 54, 81, 74, 75, 76, 18, 12, 16, 80, 35, 35, 83, 84, 92, 99, 87, 88, 89, 65, 91,
        38, 92, 82, 70, 71, 93, 92, 74, 75, 76, 92, 92, 80, 80, 80, 10, 83, 84, 94, 79, 87, 88, 89, 65, 91, 80, 105, 68,
        70, 71, 87, 105, 74, 75, 76, 105, 80, 105, 80, 105, 80, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70,
        71, 105, 105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70,
        71, 105, 105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70,
        71, 105, 105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70,
        71, 105, 105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70,
        71, 105, 105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 5, 87, 88, 89, 105, 91, 105, 105, 13, 14,
        15, 105, 17, 105, 105, 20, 21, 105, 105, 105, 105, 26, 105, 105, 105, 30, 65, 32, 33, 105, 105, 70, 71, 105,
        105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 59, 60, 70, 71, 105,
        105, 74, 75, 76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 5, 87, 88, 89, 105, 91, 105, 105, 13, 14, 15, 105,
        17, 105, 105, 20, 21, 105, 105, 105, 105, 26, 105, 105, 105, 30, 65, 32, 33, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 59, 60, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 75,
        76, 105, 105, 105, 80, 105, 105, 83, 84, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 105,
        76, 105, 105, 105, 80, 105, 1, 105, 84, 105, 1, 87, 88, 89, 65, 91, 105, 12, 105, 70, 71, 105, 105, 74, 105, 76,
        105, 105, 105, 80, 105, 105, 27, 84, 1, 2, 87, 88, 89, 34, 91, 105, 105, 105, 39, 40, 41, 38, 39, 40, 41, 62,
        63, 64, 65, 66, 67, 105, 105, 70, 105, 56, 57, 58, 2, 56, 57, 58, 105, 105, 37, 105, 39, 40, 41, 13, 14, 105,
        16, 105, 18, 19, 49, 2, 1, 39, 40, 41, 105, 56, 57, 58, 105, 105, 13, 14, 105, 105, 105, 18, 19, 105, 56, 57,
        58, 105, 105, 105, 25, 47, 27, 49, 105, 51, 105, 53, 105, 34, 105, 105, 105, 105, 39, 40, 41, 105, 105, 105, 47,
        105, 49, 105, 51, 105, 53, 54, 105, 105, 65, 56, 57, 58, 105, 70, 71, 105, 105, 74, 105, 76, 105, 105, 105, 80,
        105, 105, 105, 12, 105, 105, 87, 88, 89, 105, 91, 65, 105, 22, 105, 24, 70, 71, 27, 105, 74, 105, 76, 105, 105,
        34, 80, 36, 105, 38, 105, 105, 105, 87, 88, 89, 65, 91, 47, 105, 105, 70, 71, 105, 105, 74, 105, 76, 105, 105,
        105, 80, 105, 105, 105, 105, 105, 105, 87, 88, 89, 65, 91, 105, 105, 105, 70, 71, 105, 105, 74, 105, 76, 105,
        105, 105, 80, 105, 1, 105, 105, 105, 105, 87, 88, 89, 65, 91, 1, 105, 105, 70, 71, 105, 105, 74, 105, 76, 105,
        12, 105, 80, 105, 105, 27, 105, 105, 105, 87, 88, 89, 34, 91, 2, 105, 105, 39, 40, 41, 105, 2, 105, 105, 105,
        13, 14, 39, 40, 41, 18, 19, 13, 14, 56, 57, 58, 18, 19, 1, 105, 105, 105, 105, 56, 57, 58, 1, 105, 105, 105,
        105, 105, 105, 105, 105, 105, 105, 105, 47, 105, 49, 105, 51, 105, 53, 47, 105, 49, 105, 51, 105, 53, 105, 28,
        105, 38, 39, 40, 41, 1, 105, 105, 105, 105, 39, 40, 41, 1, 105, 105, 12, 105, 105, 56, 57, 58, 105, 105, 12,
        105, 105, 56, 57, 58, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13, 14, 39, 40, 41, 18, 19, 1, 105,
        105, 39, 40, 41, 1, 2, 105, 1, 105, 105, 56, 57, 58, 105, 105, 105, 105, 105, 56, 57, 58, 105, 105, 105, 105,
        47, 105, 49, 105, 51, 105, 53, 105, 1, 105, 105, 39, 40, 41, 1, 105, 105, 39, 40, 41, 39, 40, 41, 105, 105, 12,
        105, 105, 56, 57, 58, 105, 60, 105, 56, 57, 58, 56, 57, 58, 105, 105, 105, 105, 105, 105, 39, 40, 41, 105, 105,
        105, 39, 40, 41, 105, 105, 105, 105, 105, 105, 54, 105, 56, 57, 58, 105, 105, 105, 56, 57, 58,);

    const YY_SHIFT_USE_DFLT = - 35;

    const YY_SHIFT_MAX = 242;

    static public $yy_shift_ofst = array(517, 316, 316, 81, 363, 363, 81, 81, - 13, - 13, 34, 269, 81, 410, 269, 81, 81,
        81, 81, 81, 81, 81, 81, 81, 81, 81, 222, 81, 81, 81, 81, 81, 81, 128, 81, 81, 81, 175, 175, 457, 457, 457, 457,
        457, 1614, 1536, 1762, 1762, 1762, 1762, 1762, 517, 942, 1906, 1941, 1947, 1772, 1540, 1822, 1871, 1863, 1830,
        526, 1912, 1915, 1915, 1915, 693, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915, 143, 1577, 96, 1577,
        198, 601, 49, 169, 1014, - 4, 43, 184, 184, 378, 378, 49, 49, 169, 169, 569, 49, 353, 237, 425, 585, 284, 527,
        244, 233, 233, 348, 278, 724, 399, 108, 399, 592, 246, 614, 625, 246, 367, 642, 297, 297, 297, 56, 297, 56, 297,
        297, 297, 297, - 35, 1612, 466, 1593, 1803, 1796, 1887, 669, 556, 388, 374, 391, 391, 453, 391, 391, 246, 246,
        246, 246, 246, 246, 246, 246, 246, 98, 391, 391, 246, 246, 391, 285, 285, 246, 285, 246, 285, 391, 453, 246,
        246, 246, 246, 246, 246, 246, 246, 352, 717, 246, 783, 56, 297, 297, 297, 215, 297, 215, 56, 297, 424, 56, - 35,
        - 35, - 35, - 35, - 35, 1564, 1676, 502, 567, - 11, - 8, 444, 50, 191, 455, 472, 153, 434, 16, - 21, 506, 260,
        428, 103, - 34, 704, 730, 735, 493, 745, 752, 424, 740, 749, 732, 733, 584, 729, 588, 593, 561, 492, 530, 523,
        599, 663, 685, 607, 701, 699, 580,);

    const YY_REDUCE_USE_DFLT = - 70;

    const YY_REDUCE_MAX = 196;

    static public $yy_reduce_ofst = array(1520, 488, 627, 577, 661, 550, 521, 602, 1205, 1155, 1380, 736, 908, 811, 861,
        836, 786, 933, 1305, 1330, 1105, 1055, 1080, 1430, 1180, 1130, 1030, 1230, 1405, 1355, 1255, 1280, 1005, 711,
        686, 761, 980, 1480, 1455, 1604, 1706, 1631, 1656, 1681, 300, 159, 159, 347, 206, 253, 18, 490, - 59, 65, 65,
        65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 80, 65, 65, 65, 65, 65, 65, 65, 65, 65, 127, 65, 127, 65, 232,
        33, - 14, 267, 369, 109, 479, 640, 576, 581, 268, 563, 292, 579, 419, 613, 673, 349, 95, 95, 89, 95, 359, - 33,
        359, 30, 90, - 33, 624, 631, 95, 497, 95, 606, 619, - 33, 541, 324, 95, 157, 95, 95, - 33, 95, 437, 95, 95, 95,
        95, 95, 696, 696, 696, 696, 696, 696, 710, 702, 696, 696, 690, 690, 692, 690, 690, 698, 698, 698, 698, 698, 698,
        698, 698, 698, 697, 690, 690, 698, 698, 690, 738, 734, 698, 723, 698, 712, 690, 687, 698, 698, 698, 698, 698,
        698, 698, 698, 721, 718, 698, 737, 214, 48, 48, 48, 161, 48, 161, 214, 48, 240, 214, 228, 395, - 69, 679, 678,);

    static public $yyExpectedTokens = array(array(3, 4, 5, 6, 7, 8, 9, 13, 14, 17, 20, 21, 26, 30, 32, 33,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 31, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 31, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 53, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 55, 59,),
        array(13, 14, 15, 17, 18, 20, 21, 26, 30, 32, 33, 35, 37, 40, 44, 45, 46, 47, 48, 50, 52, 55, 59,),
        array(1, 25, 27, 34, 39, 40, 41, 56, 57, 58,), array(1, 12, 27, 34, 39, 40, 41, 56, 57, 58,),
        array(1, 27, 34, 39, 40, 41, 56, 57, 58,), array(1, 27, 34, 39, 40, 41, 56, 57, 58,),
        array(1, 27, 34, 39, 40, 41, 56, 57, 58,), array(1, 27, 34, 39, 40, 41, 56, 57, 58,),
        array(1, 27, 34, 39, 40, 41, 56, 57, 58,), array(3, 4, 5, 6, 7, 8, 9, 13, 14, 17, 20, 21, 26, 30, 32, 33,),
        array(5, 13, 14, 15, 17, 20, 21, 26, 30, 32, 33, 59, 60,), array(1, 39, 40, 41, 56, 57, 58, 60,),
        array(1, 39, 40, 41, 54, 56, 57, 58,), array(1, 12, 39, 40, 41, 56, 57, 58,),
        array(1, 12, 39, 40, 41, 56, 57, 58,), array(1, 38, 39, 40, 41, 56, 57, 58,),
        array(1, 38, 39, 40, 41, 56, 57, 58,), array(1, 12, 39, 40, 41, 56, 57, 58,),
        array(1, 12, 39, 40, 41, 56, 57, 58,), array(1, 28, 39, 40, 41, 56, 57, 58,),
        array(1, 22, 39, 40, 41, 56, 57, 58,), array(1, 2, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,),
        array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,), array(1, 12, 19, 27, 34, 37, 49,),
        array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,),
        array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,),
        array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,), array(1, 39, 40, 41, 56, 57, 58,),
        array(1, 12, 23, 27, 34, 42,), array(39, 40, 41, 56, 57, 58,), array(1, 12, 23, 27, 34, 42,),
        array(39, 40, 41, 56, 57, 58,), array(15, 18, 52, 55,), array(1, 12, 27, 34,), array(1, 27, 34,),
        array(15, 37, 55,), array(5, 13, 14, 15, 17, 20, 21, 26, 30, 32, 33, 59, 60,), array(13, 14, 18, 27, 29, 34,),
        array(13, 14, 18, 27, 29, 34,), array(13, 14, 18, 27, 34,), array(13, 14, 18, 27, 34,), array(1, 12, 27, 34,),
        array(1, 12, 27, 34,), array(1, 27, 34,), array(1, 27, 34,), array(15, 37, 55,), array(15, 37, 55,),
        array(19, 47, 53,), array(1, 27, 34,), array(1, 2,), array(1, 12, 27, 28, 34,), array(1, 12, 27, 34,),
        array(14, 15, 18, 55,), array(1, 12, 27, 34,), array(13, 14, 18, 51,), array(16, 19, 49,), array(13, 14, 18,),
        array(13, 14, 18,), array(9, 10, 11,), array(16, 19, 49,), array(1, 19,), array(15, 18,), array(1, 12,),
        array(15, 18,), array(1, 54,), array(27, 34,), array(15, 55,), array(19, 49,), array(27, 34,), array(27, 34,),
        array(1, 29,), array(1,), array(1,), array(1,), array(19,), array(1,), array(19,), array(1,), array(1,),
        array(1,), array(1,), array(), array(2, 13, 14, 18, 19, 47, 49, 51, 53, 54,),
        array(2, 13, 14, 16, 18, 19, 47, 49, 51, 53,), array(2, 13, 14, 16, 18, 19, 47, 49, 51, 53,),
        array(2, 13, 14, 18, 19, 47, 49, 51, 53,), array(2, 13, 14, 18, 19, 47, 49, 51, 53,),
        array(13, 14, 18, 19, 47, 49, 51, 53,), array(14, 15, 18, 35, 55,), array(13, 14, 18, 51,), array(16, 47, 53,),
        array(13, 14, 18,), array(47, 53,), array(47, 53,), array(47, 53,), array(47, 53,), array(47, 53,),
        array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,),
        array(27, 34,), array(27, 34,), array(14, 37,), array(47, 53,), array(47, 53,), array(27, 34,), array(27, 34,),
        array(47, 53,), array(15, 55,), array(15, 55,), array(27, 34,), array(15, 55,), array(27, 34,), array(15, 55,),
        array(47, 53,), array(47, 53,), array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,), array(27, 34,),
        array(27, 34,), array(27, 34,), array(27, 34,), array(18, 50,), array(16, 23,), array(27, 34,), array(10,),
        array(19,), array(1,), array(1,), array(1,), array(2,), array(1,), array(2,), array(19,), array(1,), array(37,),
        array(19,), array(), array(), array(), array(), array(), array(1, 2, 37, 39, 40, 41, 49, 56, 57, 58,),
        array(12, 22, 24, 27, 34, 36, 38, 47,), array(12, 16, 27, 34, 37, 49,), array(13, 14, 18, 51,),
        array(37, 47, 49, 54,), array(29, 37, 49,), array(23, 42, 54,), array(23, 42, 60,), array(23, 42,),
        array(36, 38,), array(36, 38,), array(18, 51,), array(47, 54,), array(37, 49,), array(37, 49,), array(22, 36,),
        array(16, 47,), array(36, 38,), array(36, 54,), array(37, 49,), array(54,), array(24,), array(18,), array(18,),
        array(18,), array(12,), array(37,), array(38,), array(16,), array(35,), array(35,), array(47,), array(18,),
        array(18,), array(18,), array(37,), array(52,), array(5,), array(23,), array(18,), array(18,), array(54,),
        array(43,), array(18,), array(18,), array(52,), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(), array(),
        array(), array(), array(), array(),);

    static public $yy_default = array(341, 518, 533, 498, 533, 533, 498, 498, 533, 533, 533, 533, 533, 533, 533, 533,
        533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
        533, 533, 533, 533, 533, 533, 402, 533, 402, 369, 378, 402, 402, 338, 533, 533, 533, 533, 533, 533, 533, 533,
        533, 407, 533, 533, 519, 409, 497, 440, 496, 423, 520, 521, 404, 407, 414, 383, 413, 430, 429, 430, 428, 533,
        416, 402, 533, 533, 402, 402, 402, 402, 422, 447, 402, 402, 533, 533, 510, 402, 392, 416, 416, 533, 416, 463,
        453, 463, 463, 533, 453, 396, 533, 416, 533, 416, 380, 533, 453, 402, 402, 416, 398, 416, 420, 453, 426, 507,
        431, 419, 433, 432, 505, 452, 452, 452, 452, 452, 452, 533, 465, 479, 463, 490, 457, 456, 459, 461, 365, 366,
        373, 375, 371, 370, 362, 367, 376, 463, 488, 489, 364, 377, 491, 533, 533, 391, 533, 389, 533, 460, 458, 390,
        387, 388, 381, 382, 385, 386, 361, 533, 533, 379, 355, 508, 447, 397, 393, 499, 399, 500, 511, 422, 463, 485,
        463, 504, 504, 463, 504, 440, 436, 440, 464, 440, 440, 430, 430, 430, 533, 533, 533, 436, 533, 440, 533, 436,
        533, 533, 448, 533, 410, 533, 533, 533, 533, 479, 533, 533, 533, 438, 436, 533, 533, 533, 509, 533, 346, 430,
        533, 533, 443, 442, 533, 533, 533, 339, 494, 415, 471, 478, 472, 411, 384, 403, 479, 470, 506, 442, 493, 484,
        473, 469, 455, 395, 501, 502, 503, 483, 401, 481, 482, 434, 435, 462, 466, 467, 418, 417, 437, 439, 441, 372,
        400, 348, 347, 349, 345, 344, 340, 342, 343, 350, 351, 357, 358, 359, 356, 354, 352, 353, 468, 443, 394, 522,
        523, 486, 530, 480, 495, 529, 524, 527, 515, 517, 516, 525, 532, 526, 528, 531, 487, 454, 449, 476, 474, 446,
        425, 444, 445, 424, 477, 512, 450, 451, 475, 427, 421, 513, 514, 492,);

    const YYNOCODE = 106;

    const YYSTACKDEPTH = 500;

    const YYNSTATE = 338;

    const YYNRULE = 195;

    const YYERRORSYMBOL = 61;

    const YYERRSYMDT = 'yy0';

    const YYFALLBACK = 0;

    public static $yyFallback = array();

    public function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
    }

    public function PrintTrace()
    {
        $this->yyTraceFILE = fopen('php://output', 'w');
        $this->yyTracePrompt = '<br>';
    }

    public $yyTraceFILE;

    public $yyTracePrompt;

    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array('$', 'VERT', 'COLON', 'PHP', 'NOCACHE', 'TEXT', 'STRIPON', 'STRIPOFF', 'BLOCKSOURCE',
        'LITERALSTART', 'LITERALEND', 'LITERAL', 'RDEL', 'SIMPELOUTPUT', 'LDEL', 'DOLLARID', 'EQUAL', 'SIMPLETAG', 'ID',
        'PTR', 'LDELIF', 'LDELFOR', 'SEMICOLON', 'INCDEC', 'TO', 'STEP', 'LDELFOREACH', 'SPACE', 'AS', 'APTR',
        'LDELSETFILTER', 'SMARTYBLOCKCHILDPARENT', 'CLOSETAG', 'LDELSLASH', 'ATTR', 'INTEGER', 'COMMA', 'OPENP',
        'CLOSEP', 'MATH', 'UNIMATH', 'ISIN', 'INSTANCEOF', 'QMARK', 'NOT', 'TYPECAST', 'HEX', 'DOT',
        'SINGLEQUOTESTRING', 'DOUBLECOLON', 'NAMESPACE', 'AT', 'HATCH', 'OPENB', 'CLOSEB', 'DOLLAR', 'LOGOP', 'TLOGOP',
        'SINGLECOND', 'QUOTE', 'BACKTICK', 'error', 'start', 'template', 'template_element', 'smartytag', 'literal',
        'text_content', 'literal_elements', 'literal_element', 'tag', 'variable', 'modifierlist', 'attributes', 'value',
        'expr', 'varindexed', 'statement', 'statements', 'foraction', 'varvar', 'modparameters', 'attribute', 'ternary',
        'array', 'lop', 'scond', 'ns1', 'function', 'doublequoted_with_quotes', 'static_class_access', 'object',
        'arrayindex', 'indexdef', 'varvarele', 'objectchain', 'objectelement', 'method', 'params', 'modifier',
        'modparameter', 'arrayelements', 'arrayelement', 'doublequoted', 'doublequotedcontent',);

    public static $yyRuleName = array('start ::= template', 'template ::= template_element',
        'template ::= template template_element', 'template ::=', 'template_element ::= smartytag',
        'template_element ::= literal', 'template_element ::= PHP', 'template_element ::= NOCACHE',
        'template_element ::= text_content', 'text_content ::= TEXT', 'text_content ::= text_content TEXT',
        'template_element ::= STRIPON', 'template_element ::= STRIPOFF', 'template_element ::= BLOCKSOURCE',
        'literal ::= LITERALSTART LITERALEND', 'literal ::= LITERALSTART literal_elements LITERALEND',
        'literal_elements ::= literal_elements literal_element', 'literal_elements ::=', 'literal_element ::= literal',
        'literal_element ::= LITERAL', 'smartytag ::= tag RDEL', 'smartytag ::= SIMPELOUTPUT', 'tag ::= LDEL variable',
        'tag ::= LDEL variable modifierlist attributes', 'tag ::= LDEL variable attributes', 'tag ::= LDEL value',
        'tag ::= LDEL value modifierlist attributes', 'tag ::= LDEL value attributes',
        'tag ::= LDEL expr modifierlist attributes', 'tag ::= LDEL expr attributes',
        'tag ::= LDEL DOLLARID EQUAL value', 'tag ::= LDEL DOLLARID EQUAL expr',
        'tag ::= LDEL DOLLARID EQUAL expr attributes', 'tag ::= LDEL varindexed EQUAL expr attributes',
        'smartytag ::= SIMPLETAG', 'tag ::= LDEL ID attributes', 'tag ::= LDEL ID',
        'tag ::= LDEL ID modifierlist attributes', 'tag ::= LDEL ID PTR ID attributes',
        'tag ::= LDEL ID PTR ID modifierlist attributes', 'tag ::= LDELIF expr', 'tag ::= LDELIF expr attributes',
        'tag ::= LDELIF statement', 'tag ::= LDELIF statement attributes',
        'tag ::= LDELFOR statements SEMICOLON expr SEMICOLON varindexed foraction attributes',
        'foraction ::= EQUAL expr', 'foraction ::= INCDEC', 'tag ::= LDELFOR statement TO expr attributes',
        'tag ::= LDELFOR statement TO expr STEP expr attributes', 'tag ::= LDELFOREACH attributes',
        'tag ::= LDELFOREACH SPACE value AS varvar attributes',
        'tag ::= LDELFOREACH SPACE value AS varvar APTR varvar attributes',
        'tag ::= LDELFOREACH SPACE expr AS varvar attributes',
        'tag ::= LDELFOREACH SPACE expr AS varvar APTR varvar attributes', 'tag ::= LDELSETFILTER ID modparameters',
        'tag ::= LDELSETFILTER ID modparameters modifierlist', 'tag ::= LDEL SMARTYBLOCKCHILDPARENT',
        'smartytag ::= CLOSETAG', 'tag ::= LDELSLASH ID', 'tag ::= LDELSLASH ID modifierlist',
        'tag ::= LDELSLASH ID PTR ID', 'tag ::= LDELSLASH ID PTR ID modifierlist',
        'attributes ::= attributes attribute', 'attributes ::= attribute', 'attributes ::=',
        'attribute ::= SPACE ID EQUAL ID', 'attribute ::= ATTR expr', 'attribute ::= ATTR value',
        'attribute ::= SPACE ID', 'attribute ::= SPACE expr', 'attribute ::= SPACE value',
        'attribute ::= SPACE INTEGER EQUAL expr', 'statements ::= statement',
        'statements ::= statements COMMA statement', 'statement ::= DOLLARID EQUAL INTEGER',
        'statement ::= DOLLARID EQUAL expr', 'statement ::= varindexed EQUAL expr',
        'statement ::= OPENP statement CLOSEP', 'expr ::= value', 'expr ::= ternary', 'expr ::= DOLLARID COLON ID',
        'expr ::= expr MATH value', 'expr ::= expr UNIMATH value', 'expr ::= array', 'expr ::= expr modifierlist',
        'expr ::= expr lop expr', 'expr ::= expr scond', 'expr ::= expr ISIN array', 'expr ::= expr ISIN value',
        'expr ::= variable INSTANCEOF ns1', 'ternary ::= OPENP expr CLOSEP QMARK DOLLARID COLON expr',
        'ternary ::= OPENP expr CLOSEP QMARK expr COLON expr', 'value ::= variable', 'value ::= UNIMATH value',
        'value ::= NOT value', 'value ::= TYPECAST value', 'value ::= variable INCDEC', 'value ::= HEX',
        'value ::= INTEGER', 'value ::= INTEGER DOT INTEGER', 'value ::= INTEGER DOT', 'value ::= DOT INTEGER',
        'value ::= ID', 'value ::= function', 'value ::= OPENP expr CLOSEP', 'value ::= SINGLEQUOTESTRING',
        'value ::= doublequoted_with_quotes', 'value ::= varindexed DOUBLECOLON static_class_access',
        'value ::= smartytag', 'value ::= value modifierlist', 'value ::= NAMESPACE',
        'value ::= ns1 DOUBLECOLON static_class_access', 'ns1 ::= ID', 'ns1 ::= NAMESPACE', 'variable ::= DOLLARID',
        'variable ::= varindexed', 'variable ::= varvar AT ID', 'variable ::= object', 'variable ::= HATCH ID HATCH',
        'variable ::= HATCH ID HATCH arrayindex', 'variable ::= HATCH variable HATCH',
        'variable ::= HATCH variable HATCH arrayindex', 'varindexed ::= DOLLARID arrayindex',
        'varindexed ::= varvar arrayindex', 'arrayindex ::= arrayindex indexdef', 'arrayindex ::=',
        'indexdef ::= DOT DOLLARID', 'indexdef ::= DOT varvar', 'indexdef ::= DOT varvar AT ID', 'indexdef ::= DOT ID',
        'indexdef ::= DOT INTEGER', 'indexdef ::= DOT LDEL expr RDEL', 'indexdef ::= OPENB ID CLOSEB',
        'indexdef ::= OPENB ID DOT ID CLOSEB', 'indexdef ::= OPENB SINGLEQUOTESTRING CLOSEB',
        'indexdef ::= OPENB INTEGER CLOSEB', 'indexdef ::= OPENB DOLLARID CLOSEB', 'indexdef ::= OPENB variable CLOSEB',
        'indexdef ::= OPENB value CLOSEB', 'indexdef ::= OPENB expr CLOSEB', 'indexdef ::= OPENB CLOSEB',
        'varvar ::= DOLLARID', 'varvar ::= DOLLAR', 'varvar ::= varvar varvarele', 'varvarele ::= ID',
        'varvarele ::= SIMPELOUTPUT', 'varvarele ::= LDEL expr RDEL', 'object ::= varindexed objectchain',
        'objectchain ::= objectelement', 'objectchain ::= objectchain objectelement',
        'objectelement ::= PTR ID arrayindex', 'objectelement ::= PTR varvar arrayindex',
        'objectelement ::= PTR LDEL expr RDEL arrayindex', 'objectelement ::= PTR ID LDEL expr RDEL arrayindex',
        'objectelement ::= PTR method', 'function ::= ns1 OPENP params CLOSEP', 'method ::= ID OPENP params CLOSEP',
        'method ::= DOLLARID OPENP params CLOSEP', 'params ::= params COMMA expr', 'params ::= expr', 'params ::=',
        'modifierlist ::= modifierlist modifier modparameters', 'modifierlist ::= modifier modparameters',
        'modifier ::= VERT AT ID', 'modifier ::= VERT ID', 'modparameters ::= modparameters modparameter',
        'modparameters ::=', 'modparameter ::= COLON value', 'modparameter ::= COLON array',
        'static_class_access ::= method', 'static_class_access ::= method objectchain', 'static_class_access ::= ID',
        'static_class_access ::= DOLLARID arrayindex', 'static_class_access ::= DOLLARID arrayindex objectchain',
        'lop ::= LOGOP', 'lop ::= TLOGOP', 'scond ::= SINGLECOND', 'array ::= OPENB arrayelements CLOSEB',
        'arrayelements ::= arrayelement', 'arrayelements ::= arrayelements COMMA arrayelement', 'arrayelements ::=',
        'arrayelement ::= value APTR expr', 'arrayelement ::= ID APTR expr', 'arrayelement ::= expr',
        'doublequoted_with_quotes ::= QUOTE QUOTE', 'doublequoted_with_quotes ::= QUOTE doublequoted QUOTE',
        'doublequoted ::= doublequoted doublequotedcontent', 'doublequoted ::= doublequotedcontent',
        'doublequotedcontent ::= BACKTICK variable BACKTICK', 'doublequotedcontent ::= BACKTICK expr BACKTICK',
        'doublequotedcontent ::= DOLLARID', 'doublequotedcontent ::= LDEL variable RDEL',
        'doublequotedcontent ::= LDEL expr RDEL', 'doublequotedcontent ::= smartytag', 'doublequotedcontent ::= TEXT',);

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:
                break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (empty($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE, $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] . "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx --;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        static $res3 = array();
        static $res4 = array();
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (isset($res3[$state][$token])) {
            if ($res3[$state][$token]) {
                return $expected;
            }
        } else {
            if ($res3[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return $expected;
            }
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done ++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno][0]);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                        if (isset($res4[$nextstate][$token])) {
                            if ($res4[$nextstate][$token]) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        } else {
                            if ($res4[$nextstate][$token] = in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                                $this->yyidx = $yyidx;
                                $this->yystack = $stack;
                                return array_unique($expected);
                            }
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx ++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        static $res = array();
        static $res2 = array();
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (isset($res[$state][$token])) {
            if ($res[$state][$token]) {
                return true;
            }
        } else {
            if ($res[$state][$token] = in_array($token, self::$yyExpectedTokens[$state], true)) {
                return true;
            }
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done ++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::$yyRuleInfo[$yyruleno][0]);
                    if (isset($res2[$nextstate][$token])) {
                        if ($res2[$nextstate][$token]) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    } else {
                        if ($res2[$nextstate][$token] = (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true))) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return true;
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx ++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

    public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " . $this->yyTokenName[$iLookAhead] . " => " . $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx ++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx --;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            #line 190 "../smarty/lexer/smarty_internal_templateparser.y"

            $this->internalError = true;
            $this->compiler->trigger_template_error("Stack overflow in template parser");

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        $this->yystack[] = $yytos;
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt, $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i ++) {
                fprintf($this->yyTraceFILE, " %s", $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE, "\n");
        }
    }

    public static $yyRuleInfo = array(array(0 => 62, 1 => 1), array(0 => 63, 1 => 1), array(0 => 63, 1 => 2),
        array(0 => 63, 1 => 0), array(0 => 64, 1 => 1), array(0 => 64, 1 => 1), array(0 => 64, 1 => 1),
        array(0 => 64, 1 => 1), array(0 => 64, 1 => 1), array(0 => 67, 1 => 1), array(0 => 67, 1 => 2),
        array(0 => 64, 1 => 1), array(0 => 64, 1 => 1), array(0 => 64, 1 => 1), array(0 => 66, 1 => 2),
        array(0 => 66, 1 => 3), array(0 => 68, 1 => 2), array(0 => 68, 1 => 0), array(0 => 69, 1 => 1),
        array(0 => 69, 1 => 1), array(0 => 65, 1 => 2), array(0 => 65, 1 => 1), array(0 => 70, 1 => 2),
        array(0 => 70, 1 => 4), array(0 => 70, 1 => 3), array(0 => 70, 1 => 2), array(0 => 70, 1 => 4),
        array(0 => 70, 1 => 3), array(0 => 70, 1 => 4), array(0 => 70, 1 => 3), array(0 => 70, 1 => 4),
        array(0 => 70, 1 => 4), array(0 => 70, 1 => 5), array(0 => 70, 1 => 5), array(0 => 65, 1 => 1),
        array(0 => 70, 1 => 3), array(0 => 70, 1 => 2), array(0 => 70, 1 => 4), array(0 => 70, 1 => 5),
        array(0 => 70, 1 => 6), array(0 => 70, 1 => 2), array(0 => 70, 1 => 3), array(0 => 70, 1 => 2),
        array(0 => 70, 1 => 3), array(0 => 70, 1 => 8), array(0 => 79, 1 => 2), array(0 => 79, 1 => 1),
        array(0 => 70, 1 => 5), array(0 => 70, 1 => 7), array(0 => 70, 1 => 2), array(0 => 70, 1 => 6),
        array(0 => 70, 1 => 8), array(0 => 70, 1 => 6), array(0 => 70, 1 => 8), array(0 => 70, 1 => 3),
        array(0 => 70, 1 => 4), array(0 => 70, 1 => 2), array(0 => 65, 1 => 1), array(0 => 70, 1 => 2),
        array(0 => 70, 1 => 3), array(0 => 70, 1 => 4), array(0 => 70, 1 => 5), array(0 => 73, 1 => 2),
        array(0 => 73, 1 => 1), array(0 => 73, 1 => 0), array(0 => 82, 1 => 4), array(0 => 82, 1 => 2),
        array(0 => 82, 1 => 2), array(0 => 82, 1 => 2), array(0 => 82, 1 => 2), array(0 => 82, 1 => 2),
        array(0 => 82, 1 => 4), array(0 => 78, 1 => 1), array(0 => 78, 1 => 3), array(0 => 77, 1 => 3),
        array(0 => 77, 1 => 3), array(0 => 77, 1 => 3), array(0 => 77, 1 => 3), array(0 => 75, 1 => 1),
        array(0 => 75, 1 => 1), array(0 => 75, 1 => 3), array(0 => 75, 1 => 3), array(0 => 75, 1 => 3),
        array(0 => 75, 1 => 1), array(0 => 75, 1 => 2), array(0 => 75, 1 => 3), array(0 => 75, 1 => 2),
        array(0 => 75, 1 => 3), array(0 => 75, 1 => 3), array(0 => 75, 1 => 3), array(0 => 83, 1 => 7),
        array(0 => 83, 1 => 7), array(0 => 74, 1 => 1), array(0 => 74, 1 => 2), array(0 => 74, 1 => 2),
        array(0 => 74, 1 => 2), array(0 => 74, 1 => 2), array(0 => 74, 1 => 1), array(0 => 74, 1 => 1),
        array(0 => 74, 1 => 3), array(0 => 74, 1 => 2), array(0 => 74, 1 => 2), array(0 => 74, 1 => 1),
        array(0 => 74, 1 => 1), array(0 => 74, 1 => 3), array(0 => 74, 1 => 1), array(0 => 74, 1 => 1),
        array(0 => 74, 1 => 3), array(0 => 74, 1 => 1), array(0 => 74, 1 => 2), array(0 => 74, 1 => 1),
        array(0 => 74, 1 => 3), array(0 => 87, 1 => 1), array(0 => 87, 1 => 1), array(0 => 71, 1 => 1),
        array(0 => 71, 1 => 1), array(0 => 71, 1 => 3), array(0 => 71, 1 => 1), array(0 => 71, 1 => 3),
        array(0 => 71, 1 => 4), array(0 => 71, 1 => 3), array(0 => 71, 1 => 4), array(0 => 76, 1 => 2),
        array(0 => 76, 1 => 2), array(0 => 92, 1 => 2), array(0 => 92, 1 => 0), array(0 => 93, 1 => 2),
        array(0 => 93, 1 => 2), array(0 => 93, 1 => 4), array(0 => 93, 1 => 2), array(0 => 93, 1 => 2),
        array(0 => 93, 1 => 4), array(0 => 93, 1 => 3), array(0 => 93, 1 => 5), array(0 => 93, 1 => 3),
        array(0 => 93, 1 => 3), array(0 => 93, 1 => 3), array(0 => 93, 1 => 3), array(0 => 93, 1 => 3),
        array(0 => 93, 1 => 3), array(0 => 93, 1 => 2), array(0 => 80, 1 => 1), array(0 => 80, 1 => 1),
        array(0 => 80, 1 => 2), array(0 => 94, 1 => 1), array(0 => 94, 1 => 1), array(0 => 94, 1 => 3),
        array(0 => 91, 1 => 2), array(0 => 95, 1 => 1), array(0 => 95, 1 => 2), array(0 => 96, 1 => 3),
        array(0 => 96, 1 => 3), array(0 => 96, 1 => 5), array(0 => 96, 1 => 6), array(0 => 96, 1 => 2),
        array(0 => 88, 1 => 4), array(0 => 97, 1 => 4), array(0 => 97, 1 => 4), array(0 => 98, 1 => 3),
        array(0 => 98, 1 => 1), array(0 => 98, 1 => 0), array(0 => 72, 1 => 3), array(0 => 72, 1 => 2),
        array(0 => 99, 1 => 3), array(0 => 99, 1 => 2), array(0 => 81, 1 => 2), array(0 => 81, 1 => 0),
        array(0 => 100, 1 => 2), array(0 => 100, 1 => 2), array(0 => 90, 1 => 1), array(0 => 90, 1 => 2),
        array(0 => 90, 1 => 1), array(0 => 90, 1 => 2), array(0 => 90, 1 => 3), array(0 => 85, 1 => 1),
        array(0 => 85, 1 => 1), array(0 => 86, 1 => 1), array(0 => 84, 1 => 3), array(0 => 101, 1 => 1),
        array(0 => 101, 1 => 3), array(0 => 101, 1 => 0), array(0 => 102, 1 => 3), array(0 => 102, 1 => 3),
        array(0 => 102, 1 => 1), array(0 => 89, 1 => 2), array(0 => 89, 1 => 3), array(0 => 103, 1 => 2),
        array(0 => 103, 1 => 1), array(0 => 104, 1 => 3), array(0 => 104, 1 => 3), array(0 => 104, 1 => 1),
        array(0 => 104, 1 => 3), array(0 => 104, 1 => 3), array(0 => 104, 1 => 1), array(0 => 104, 1 => 1),);

    public static $yyReduceMap = array(0   => 0, 1 => 1, 2 => 2, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9,
                                       18  => 9, 19 => 9, 46 => 9, 69 => 9, 70 => 9, 78 => 9, 79 => 9, 83 => 9, 92 => 9,
                                       97  => 9, 98 => 9, 103 => 9, 105 => 9, 106 => 9, 110 => 9, 112 => 9, 113 => 9,
                                       117 => 9, 178 => 9, 183 => 9, 10 => 10, 11 => 11, 12 => 12, 13 => 13, 14 => 14,
                                       17  => 14, 15 => 15, 77 => 15, 16 => 16, 93 => 16, 95 => 16, 96 => 16, 124 => 16,
                                       20  => 20, 21 => 21, 22 => 22, 25 => 22, 23 => 23, 26 => 23, 24 => 24, 27 => 24,
                                       29  => 24, 28 => 28, 30 => 30, 31 => 30, 32 => 32, 33 => 33, 34 => 34, 35 => 35,
                                       36  => 36, 37 => 37, 38 => 38, 39 => 39, 40 => 40, 41 => 41, 43 => 41, 42 => 42,
                                       44  => 44, 45 => 45, 47 => 47, 48 => 48, 49 => 49, 50 => 50, 52 => 50, 51 => 51,
                                       53  => 51, 54 => 54, 55 => 55, 56 => 56, 57 => 57, 58 => 58, 59 => 59, 60 => 60,
                                       61  => 61, 62 => 62, 63 => 63, 72 => 63, 159 => 63, 163 => 63, 167 => 63,
                                       168 => 63, 64 => 64, 160 => 64, 166 => 64, 65 => 65, 66 => 66, 67 => 66,
                                       68  => 68, 144 => 68, 71 => 71, 73 => 73, 74 => 74, 75 => 74, 76 => 76, 80 => 80,
                                       81  => 81, 82 => 81, 84 => 84, 109 => 84, 85 => 85, 86 => 86, 87 => 87, 88 => 88,
                                       89  => 89, 90 => 90, 91 => 91, 94 => 94, 99 => 99, 100 => 100, 101 => 101,
                                       102 => 102, 104 => 104, 107 => 107, 108 => 108, 111 => 111, 114 => 114,
                                       115 => 115, 116 => 116, 118 => 118, 119 => 119, 120 => 120, 121 => 121,
                                       122 => 122, 123 => 123, 125 => 125, 180 => 125, 126 => 126, 127 => 127,
                                       128 => 128, 129 => 129, 130 => 130, 131 => 131, 139 => 131, 132 => 132,
                                       133 => 133, 134 => 134, 135 => 134, 137 => 134, 138 => 134, 136 => 136,
                                       140 => 140, 141 => 141, 142 => 142, 184 => 142, 143 => 143, 145 => 145,
                                       146 => 146, 147 => 147, 148 => 148, 149 => 149, 150 => 150, 151 => 151,
                                       152 => 152, 153 => 153, 154 => 154, 155 => 155, 156 => 156, 157 => 157,
                                       158 => 158, 161 => 161, 162 => 162, 164 => 164, 165 => 165, 169 => 169,
                                       170 => 170, 171 => 171, 172 => 172, 173 => 173, 174 => 174, 175 => 175,
                                       176 => 176, 177 => 177, 179 => 179, 181 => 181, 182 => 182, 185 => 185,
                                       186 => 186, 187 => 187, 188 => 188, 189 => 188, 191 => 188, 190 => 190,
                                       192 => 192, 193 => 193, 194 => 194,);

    #line 201 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r0()
    {
        $this->_retvalue = $this->root_buffer->to_smarty_php();
    }

    #line 209 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r1()
    {
        if ($this->yystack[$this->yyidx + 0]->minor != null) {
            $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 216 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r2()
    {
        if ($this->yystack[$this->yyidx + 0]->minor != null) {
            // because of possible code injection
            $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 230 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r4()
    {
        if ($this->compiler->has_code) {
            $this->_retvalue = $this->mergePrefixCode($this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = null;
        }
        $this->compiler->has_variable_string = false;
        $this->block_nesting_level = count($this->compiler->_tag_stack);
    }

    #line 241 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r5()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 245 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r6()
    {
        $code = $this->compiler->compileTag('private_php', array(array('code' => $this->yystack[$this->yyidx + 0]->minor),
            array('type' => $this->lex->phpType)), array());
        if ($this->compiler->has_code && !empty($code)) {
            $tmp = '';
            foreach ($this->compiler->prefix_code as $code) {
                $tmp .= $code;
            }
            $this->compiler->prefix_code = array();
            $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp . $code, true));
        } else {
            $this->_retvalue = null;
        }
    }

    #line 256 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r7()
    {
        $this->compiler->tag_nocache = true;
        $save = $this->template->has_nocache_code;
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode("<?php echo '{$this->yystack[$this->yyidx + 0]->minor}';?>\n", $this->compiler, true));
        $this->template->has_nocache_code = $save;
    }

    #line 263 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r8()
    {
        $this->_retvalue = $this->compiler->processText($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 267 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r9()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 271 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r10()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 276 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r11()
    {
        $this->strip = true;
    }

    #line 280 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r12()
    {
        $this->strip = false;
    }

    #line 284 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r13()
    {
        if ($this->strip) {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, preg_replace('![\t ]*[\r\n]+[\t ]*!', '', $this->yystack[$this->yyidx + 0]->minor));
        } else {
            SMARTY_INTERNAL_COMPILE_BLOCK::blockSource($this->compiler, $this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 293 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r14()
    {
        $this->_retvalue = '';
    }

    #line 297 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r15()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 301 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r16()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 317 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r20()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 323 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r21()
    {
        $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' $');
        if (preg_match('/^(.*)(\s+nocache)$/', $var, $match)) {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array('nocache'), array('value' => $this->compiler->compileVariable('\'' . $match[1] . '\'')));
        } else {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->compiler->compileVariable('\'' . $var . '\'')));
        }
    }

    #line 333 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r22()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 337 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r23()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value'        => $this->yystack[$this->yyidx + - 2]->minor,
                                                                                                                                  'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 341 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r24()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 355 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r28()
    {
        $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value'        => $this->yystack[$this->yyidx + - 2]->minor,
                                                                                                                                  'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 368 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r30()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array(array('value' => $this->yystack[$this->yyidx + 0]->minor),
            array('var' => '\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'')));
    }

    #line 376 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r32()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array_merge(array(array('value' => $this->yystack[$this->yyidx + - 1]->minor),
                                                                                 array('var' => '\'' . substr($this->yystack[$this->yyidx + - 3]->minor, 1) . '\'')), $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 380 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r33()
    {
        $this->_retvalue = $this->compiler->compileTag('assign', array_merge(array(array('value' => $this->yystack[$this->yyidx + - 1]->minor),
                                                                                 array('var' => $this->yystack[$this->yyidx + - 3]->minor['var'])), $this->yystack[$this->yyidx + 0]->minor), array('smarty_internal_index' => $this->yystack[$this->yyidx + - 3]->minor['smarty_internal_index']));
    }

    #line 385 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r34()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length));
        if ($tag == 'strip') {
            $this->strip = true;
            $this->_retvalue = null;;
        } else {
            if (defined($tag)) {
                if ($this->security) {
                    $this->security->isTrustedConstant($tag, $this->compiler);
                }
                $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $tag));
            } else {
                if (preg_match('/^(.*)(\s+nocache)$/', $tag, $match)) {
                    $this->_retvalue = $this->compiler->compileTag($match[1], array('nocache'));
                } else {
                    $this->_retvalue = $this->compiler->compileTag($tag, array());
                }
            }
        }
    }

    #line 407 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r35()
    {
        if (defined($this->yystack[$this->yyidx + - 1]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + - 1]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value' => $this->yystack[$this->yyidx + - 1]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor);
        }
    }

    #line 417 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r36()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', array(), array('value' => $this->yystack[$this->yyidx + 0]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor, array());
        }
    }

    #line 430 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r37()
    {
        if (defined($this->yystack[$this->yyidx + - 2]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + - 2]->minor, $this->compiler);
            }
            $this->_retvalue = $this->compiler->compileTag('private_print_expression', $this->yystack[$this->yyidx + 0]->minor, array('value'        => $this->yystack[$this->yyidx + - 2]->minor,
                                                                                                                                      'modifierlist' => $this->yystack[$this->yyidx + - 1]->minor));
        } else {
            $this->_retvalue = '<?php ob_start();?>' . $this->compiler->compileTag($this->yystack[$this->yyidx + - 2]->minor, $this->yystack[$this->yyidx + 0]->minor) . '<?php echo ';
            $this->_retvalue .= $this->compiler->compileTag('private_modifier', array(), array('modifierlist' => $this->yystack[$this->yyidx + - 1]->minor,
                                                                                               'value'        => 'ob_get_clean()')) . ';?>';
        }
    }

    #line 443 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r38()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 3]->minor, $this->yystack[$this->yyidx + 0]->minor, array('object_method' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 448 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r39()
    {
        $this->_retvalue = '<?php ob_start();?>' . $this->compiler->compileTag($this->yystack[$this->yyidx + - 4]->minor, $this->yystack[$this->yyidx + 0]->minor, array('object_method' => $this->yystack[$this->yyidx + - 2]->minor)) . '<?php echo ';
        $this->_retvalue .= $this->compiler->compileTag('private_modifier', array(), array('modifierlist' => $this->yystack[$this->yyidx + - 1]->minor,
                                                                                           'value'        => 'ob_get_clean()')) . ';?>';
    }

    #line 454 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r40()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 1]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, array(), array('if condition' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 459 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r41()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 2]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, $this->yystack[$this->yyidx + 0]->minor, array('if condition' => $this->yystack[$this->yyidx + - 1]->minor));
    }

    #line 464 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r42()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + - 1]->minor, $this->lex->ldel_length));
        $this->_retvalue = $this->compiler->compileTag(($tag == 'else if') ? 'elseif' : $tag, array(), array('if condition' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 475 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r44()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 6]->minor),
            array('ifexp' => $this->yystack[$this->yyidx + - 4]->minor),
            array('var' => $this->yystack[$this->yyidx + - 2]->minor),
            array('step' => $this->yystack[$this->yyidx + - 1]->minor))), 1);
    }

    #line 479 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r45()
    {
        $this->_retvalue = '=' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 487 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r47()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 3]->minor),
            array('to' => $this->yystack[$this->yyidx + - 1]->minor))), 0);
    }

    #line 491 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r48()
    {
        $this->_retvalue = $this->compiler->compileTag('for', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('start' => $this->yystack[$this->yyidx + - 5]->minor),
            array('to' => $this->yystack[$this->yyidx + - 3]->minor),
            array('step' => $this->yystack[$this->yyidx + - 1]->minor))), 0);
    }

    #line 496 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r49()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 501 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r50()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + - 3]->minor),
            array('item' => $this->yystack[$this->yyidx + - 1]->minor))));
    }

    #line 505 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r51()
    {
        $this->_retvalue = $this->compiler->compileTag('foreach', array_merge($this->yystack[$this->yyidx + 0]->minor, array(array('from' => $this->yystack[$this->yyidx + - 5]->minor),
            array('item' => $this->yystack[$this->yyidx + - 1]->minor),
            array('key' => $this->yystack[$this->yyidx + - 3]->minor))));
    }

    #line 518 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r54()
    {
        $this->_retvalue = $this->compiler->compileTag('setfilter', array(), array('modifier_list' => array(array_merge(array($this->yystack[$this->yyidx + - 1]->minor), $this->yystack[$this->yyidx + 0]->minor))));
    }

    #line 522 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r55()
    {
        $this->_retvalue = $this->compiler->compileTag('setfilter', array(), array('modifier_list' => array_merge(array(array_merge(array($this->yystack[$this->yyidx + - 2]->minor), $this->yystack[$this->yyidx + - 1]->minor)), $this->yystack[$this->yyidx + 0]->minor)));
    }

    #line 527 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r56()
    {
        $j = strrpos($this->yystack[$this->yyidx + 0]->minor, '.');
        if ($this->yystack[$this->yyidx + 0]->minor[$j + 1] == 'c') {
            // {$smarty.block.child}
            $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileChildBlock($this->compiler);
        } else {
            // {$smarty.block.parent}
            $this->_retvalue = SMARTY_INTERNAL_COMPILE_BLOCK::compileParentBlock($this->compiler);
        }
    }

    #line 540 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r57()
    {
        $tag = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' /');
        if ($tag == 'strip') {
            $this->strip = false;
            $this->_retvalue = null;
        } else {
            $this->_retvalue = $this->compiler->compileTag($tag . 'close', array());
        }
    }

    #line 549 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r58()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor . 'close', array());
    }

    #line 553 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r59()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 1]->minor . 'close', array(), array('modifier_list' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 558 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r60()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 2]->minor . 'close', array(), array('object_method' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 562 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r61()
    {
        $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + - 3]->minor . 'close', array(), array('object_method' => $this->yystack[$this->yyidx + - 1]->minor,
                                                                                                                           'modifier_list' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 570 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r62()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 576 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r63()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 581 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r64()
    {
        $this->_retvalue = array();
    }

    #line 586 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r65()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => $this->yystack[$this->yyidx + 0]->minor);
        } else {
            $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'');
        }
    }

    #line 597 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r66()
    {
        $this->_retvalue = array(trim($this->yystack[$this->yyidx + - 1]->minor, " =\n\r\t") => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 605 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r68()
    {
        $this->_retvalue = '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'';
    }

    #line 617 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r71()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 630 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r73()
    {
        $this->yystack[$this->yyidx + - 2]->minor[] = $this->yystack[$this->yyidx + 0]->minor;
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor;
    }

    #line 635 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r74()
    {
        $this->_retvalue = array('var'   => '\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'',
                                 'value' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 642 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r76()
    {
        $this->_retvalue = array('var'   => $this->yystack[$this->yyidx + - 2]->minor,
                                 'value' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 666 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r80()
    {
        $this->_retvalue = '$_smarty_tpl->getStreamVariable(\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '://' . $this->yystack[$this->yyidx + 0]->minor . '\')';
    }

    #line 671 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r81()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . trim($this->yystack[$this->yyidx + - 1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 685 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r84()
    {
        $this->_retvalue = $this->compiler->compileTag('private_modifier', array(), array('value'        => $this->yystack[$this->yyidx + - 1]->minor,
                                                                                          'modifierlist' => $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 691 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r85()
    {
        $this->_retvalue = (isset($this->yystack[$this->yyidx + - 1]->minor['pre']) ? $this->yystack[$this->yyidx + - 1]->minor['pre'] : '') . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + - 1]->minor['op'] . $this->yystack[$this->yyidx + 0]->minor . (isset($this->yystack[$this->yyidx + - 1]->minor['pre']) ? ')' : '');
    }

    #line 694 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r86()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 698 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r87()
    {
        $this->_retvalue = 'in_array(' . $this->yystack[$this->yyidx + - 2]->minor . ',' . $this->yystack[$this->yyidx + 0]->minor . ')';
    }

    #line 702 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r88()
    {
        $this->_retvalue = 'in_array(' . $this->yystack[$this->yyidx + - 2]->minor . ',(array)' . $this->yystack[$this->yyidx + 0]->minor . ')';
    }

    #line 706 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r89()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 714 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r90()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 5]->minor . ' ? ' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 2]->minor, 1) . '\'') . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 718 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r91()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 5]->minor . ' ? ' . $this->yystack[$this->yyidx + - 2]->minor . ' : ' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 733 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r94()
    {
        $this->_retvalue = '!' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 754 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r99()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 758 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r100()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . '.';
    }

    #line 762 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r101()
    {
        $this->_retvalue = '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 767 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r102()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = '\'' . $this->yystack[$this->yyidx + 0]->minor . '\'';
        }
    }

    #line 784 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r104()
    {
        $this->_retvalue = "(" . $this->yystack[$this->yyidx + - 1]->minor . ")";
    }

    #line 799 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r107()
    {
        self::$prefix_number ++;
        if ($this->yystack[$this->yyidx + - 2]->minor['var'] == '\'smarty\'') {
            $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . ' = ' . $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + - 2]->minor['smarty_internal_index']) . ';?>';
        } else {
            $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . ' = ' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 2]->minor['var']) . $this->yystack[$this->yyidx + - 2]->minor['smarty_internal_index'] . ';?>';
        }
        $this->_retvalue = '$_tmp' . self::$prefix_number . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
    }

    #line 810 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r108()
    {
        self::$prefix_number ++;
        $tmp = $this->compiler->appendCode('<?php ob_start();?>', $this->yystack[$this->yyidx + 0]->minor);
        $this->compiler->prefix_code[] = $this->compiler->appendCode($tmp, '<?php $_tmp' . self::$prefix_number . '=ob_get_clean();?>');
        $this->_retvalue = '$_tmp' . self::$prefix_number;
    }

    #line 827 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r111()
    {
        if (!in_array(strtolower($this->yystack[$this->yyidx + - 2]->minor), array('self',
                'parent')) && (!$this->security || $this->security->isTrustedStaticClassAccess($this->yystack[$this->yyidx + - 2]->minor, $this->yystack[$this->yyidx + 0]->minor, $this->compiler))
        ) {
            if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + - 2]->minor])) {
                $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + - 2]->minor] . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '::' . $this->yystack[$this->yyidx + 0]->minor[0] . $this->yystack[$this->yyidx + 0]->minor[1];
            }
        } else {
            $this->compiler->trigger_template_error("static class '" . $this->yystack[$this->yyidx + - 2]->minor . "' is undefined or not allowed by security setting");
        }
    }

    #line 861 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r114()
    {
        $this->_retvalue = $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'');
    }

    #line 864 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r115()
    {
        if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') {
            $smarty_var = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']);
            $this->_retvalue = $smarty_var;
        } else {
            // used for array reset,next,prev,end,current 
            $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var'];
            $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
            $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']) . $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
        }
    }

    #line 877 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r116()
    {
        $this->_retvalue = '$_smarty_tpl->tpl_vars[' . $this->yystack[$this->yyidx + - 2]->minor . ']->' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 887 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r118()
    {
        $this->_retvalue = '$_smarty_tpl->getConfigVariable( \'' . $this->yystack[$this->yyidx + - 1]->minor . '\')';
    }

    #line 891 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r119()
    {
        $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( \'' . $this->yystack[$this->yyidx + - 2]->minor . '\')) ? $tmp' . $this->yystack[$this->yyidx + 0]->minor . ' :null)';
    }

    #line 895 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r120()
    {
        $this->_retvalue = '$_smarty_tpl->getConfigVariable( ' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 899 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r121()
    {
        $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( ' . $this->yystack[$this->yyidx + - 2]->minor . ')) ? $tmp' . $this->yystack[$this->yyidx + 0]->minor . ' : null)';
    }

    #line 903 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r122()
    {
        $this->_retvalue = array('var'                   => '\'' . substr($this->yystack[$this->yyidx + - 1]->minor, 1) . '\'',
                                 'smarty_internal_index' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 906 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r123()
    {
        $this->_retvalue = array('var'                   => $this->yystack[$this->yyidx + - 1]->minor,
                                 'smarty_internal_index' => $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 919 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r125()
    {
        return;
    }

    #line 925 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r126()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'') . ']';
    }

    #line 928 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r127()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor) . ']';
    }

    #line 932 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r128()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 2]->minor) . '->' . $this->yystack[$this->yyidx + 0]->minor . ']';
    }

    #line 936 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r129()
    {
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            if ($this->security) {
                $this->security->isTrustedConstant($this->yystack[$this->yyidx + 0]->minor, $this->compiler);
            }
            $this->_retvalue = '[' . $this->yystack[$this->yyidx + 0]->minor . ']';
        } else {
            $this->_retvalue = "['" . $this->yystack[$this->yyidx + 0]->minor . "']";
        }
    }

    #line 947 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r130()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + 0]->minor . ']';
    }

    #line 952 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r131()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + - 1]->minor . ']';
    }

    #line 957 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r132()
    {
        $this->_retvalue = '[' . $this->compiler->compileTag('private_special_variable', array(), '[\'section\'][\'' . $this->yystack[$this->yyidx + - 1]->minor . '\'][\'index\']') . ']';
    }

    #line 961 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r133()
    {
        $this->_retvalue = '[' . $this->compiler->compileTag('private_special_variable', array(), '[\'section\'][\'' . $this->yystack[$this->yyidx + - 3]->minor . '\'][\'' . $this->yystack[$this->yyidx + - 1]->minor . '\']') . ']';
    }

    #line 964 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r134()
    {
        $this->_retvalue = '[' . $this->yystack[$this->yyidx + - 1]->minor . ']';
    }

    #line 970 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r136()
    {
        $this->_retvalue = '[' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 1]->minor, 1) . '\'') . ']';;
    }

    #line 986 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r140()
    {
        $this->_retvalue = '[]';
    }

    #line 996 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r141()
    {
        $this->_retvalue = '\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\'';
    }

    #line 1000 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r142()
    {
        $this->_retvalue = "''";
    }

    #line 1005 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r143()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . '.' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1013 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r145()
    {
        $var = trim(substr($this->yystack[$this->yyidx + 0]->minor, $this->lex->ldel_length, - $this->lex->rdel_length), ' $');
        $this->_retvalue = $this->compiler->compileVariable('\'' . $var . '\'');
    }

    #line 1019 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r146()
    {
        $this->_retvalue = '(' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 1026 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r147()
    {
        if ($this->yystack[$this->yyidx + - 1]->minor['var'] == '\'smarty\'') {
            $this->_retvalue = $this->compiler->compileTag('private_special_variable', array(), $this->yystack[$this->yyidx + - 1]->minor['smarty_internal_index']) . $this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + - 1]->minor['var']) . $this->yystack[$this->yyidx + - 1]->minor['smarty_internal_index'] . $this->yystack[$this->yyidx + 0]->minor;
        }
    }

    #line 1035 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r148()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1040 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r149()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1045 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r150()
    {
        if ($this->security && substr($this->yystack[$this->yyidx + - 1]->minor, 0, 1) == '_') {
            $this->compiler->trigger_template_error(self::Err1);
        }
        $this->_retvalue = '->' . $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1052 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r151()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{' . $this->compiler->compileVariable($this->yystack[$this->yyidx + - 1]->minor) . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1059 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r152()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{' . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1066 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r153()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        $this->_retvalue = '->{\'' . $this->yystack[$this->yyidx + - 4]->minor . '\'.' . $this->yystack[$this->yyidx + - 2]->minor . $this->yystack[$this->yyidx + 0]->minor . '}';
    }

    #line 1074 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r154()
    {
        $this->_retvalue = '->' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1082 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r155()
    {
        if (!$this->security || $this->security->isTrustedPhpFunction($this->yystack[$this->yyidx + - 3]->minor, $this->compiler)) {
            if (strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + - 3]->minor, 'array') === 0 || is_callable($this->yystack[$this->yyidx + - 3]->minor)) {
                $func_name = strtolower($this->yystack[$this->yyidx + - 3]->minor);
                if ($func_name == 'isset') {
                    if (count($this->yystack[$this->yyidx + - 1]->minor) == 0) {
                        $this->compiler->trigger_template_error('Illegal number of paramer in "isset()"');
                    }
                    $par = implode(',', $this->yystack[$this->yyidx + - 1]->minor);
                    if (strncasecmp($par, '$_smarty_tpl->getConfigVariable', strlen('$_smarty_tpl->getConfigVariable')) === 0) {
                        self::$prefix_number ++;
                        $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . '=' . str_replace(')', ', false)', $par) . ';?>';
                        $isset_par = '$_tmp' . self::$prefix_number;
                    } else {
                        $isset_par = str_replace("')->value", "',null,true,false)->value", $par);
                    }
                    $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . $isset_par . ")";
                } elseif (in_array($func_name, array('empty', 'reset', 'current', 'end', 'prev', 'next'))) {
                    if (count($this->yystack[$this->yyidx + - 1]->minor) != 1) {
                        $this->compiler->trigger_template_error('Illegal number of paramer in "empty()"');
                    }
                    if ($func_name == 'empty') {
                        $this->_retvalue = $func_name . '(' . str_replace("')->value", "',null,true,false)->value", $this->yystack[$this->yyidx + - 1]->minor[0]) . ')';
                    } else {
                        $this->_retvalue = $func_name . '(' . $this->yystack[$this->yyidx + - 1]->minor[0] . ')';
                    }
                } else {
                    $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ")";
                }
            } else {
                $this->compiler->trigger_template_error("unknown function \"" . $this->yystack[$this->yyidx + - 3]->minor . "\"");
            }
        }
    }

    #line 1121 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r156()
    {
        if ($this->security && substr($this->yystack[$this->yyidx + - 3]->minor, 0, 1) == '_') {
            $this->compiler->trigger_template_error(self::Err1);
        }
        $this->_retvalue = $this->yystack[$this->yyidx + - 3]->minor . "(" . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ")";
    }

    #line 1128 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r157()
    {
        if ($this->security) {
            $this->compiler->trigger_template_error(self::Err2);
        }
        self::$prefix_number ++;
        $this->compiler->prefix_code[] = '<?php $_tmp' . self::$prefix_number . '=' . $this->compiler->compileVariable('\'' . substr($this->yystack[$this->yyidx + - 3]->minor, 1) . '\'') . ';?>';
        $this->_retvalue = '$_tmp' . self::$prefix_number . '(' . implode(',', $this->yystack[$this->yyidx + - 1]->minor) . ')';
    }

    #line 1139 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r158()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 2]->minor, array($this->yystack[$this->yyidx + 0]->minor));
    }

    #line 1156 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r161()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 2]->minor, array(array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor)));
    }

    #line 1160 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r162()
    {
        $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor));
    }

    #line 1168 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r164()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1176 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r165()
    {
        $this->_retvalue = array_merge($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1195 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r169()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '', 'method');
    }

    #line 1200 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r170()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor,
            'method');
    }

    #line 1205 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r171()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor, '');
    }

    #line 1210 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r172()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 1]->minor, $this->yystack[$this->yyidx + 0]->minor,
            'property');
    }

    #line 1215 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r173()
    {
        $this->_retvalue = array($this->yystack[$this->yyidx + - 2]->minor,
            $this->yystack[$this->yyidx + - 1]->minor . $this->yystack[$this->yyidx + 0]->minor, 'property');
    }

    #line 1221 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r174()
    {
        $this->_retvalue['op'] = ' ' . trim($this->yystack[$this->yyidx + 0]->minor) . ' ';
    }

    #line 1225 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r175()
    {
        static $lops = array('eq'          => array('op' => ' == ', 'pre' => null),
                             'ne'          => array('op' => ' != ', 'pre' => null),
                             'neq'         => array('op' => ' != ', 'pre' => null),
                             'gt'          => array('op' => ' > ', 'pre' => null),
                             'ge'          => array('op' => ' >= ', 'pre' => null),
                             'gte'         => array('op' => ' >= ', 'pre' => null),
                             'lt'          => array('op' => ' < ', 'pre' => null),
                             'le'          => array('op' => ' <= ', 'pre' => null),
                             'lte'         => array('op' => ' <= ', 'pre' => null),
                             'mod'         => array('op' => ' % ', 'pre' => null),
                             'and'         => array('op' => ' && ', 'pre' => null),
                             'or'          => array('op' => ' || ', 'pre' => null),
                             'xor'         => array('op' => ' xor ', 'pre' => null),
                             'isdivby'     => array('op' => ' % ', 'pre' => '!('),
                             'isnotdivby'  => array('op' => ' % ', 'pre' => '('),
                             'isevenby'    => array('op' => ' / ', 'pre' => '!(1 & '),
                             'isnotevenby' => array('op' => ' / ', 'pre' => '(1 & '),
                             'isoddby'     => array('op' => ' / ', 'pre' => '(1 & '),
                             'isnotoddby'  => array('op' => ' / ', 'pre' => '!(1 & '),);
        $op = strtolower(preg_replace('/\s*/', '', $this->yystack[$this->yyidx + 0]->minor));
        $this->_retvalue = $lops[$op];
    }

    #line 1251 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r176()
    {
        static $scond = array('iseven'   => '!(1 & ', 'isnoteven' => '(1 & ', 'isodd' => '(1 & ',
                              'isnotodd' => '!(1 & ',);
        $op = strtolower(str_replace(' ', '', $this->yystack[$this->yyidx + 0]->minor));
        $this->_retvalue = $scond[$op];
    }

    #line 1265 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r177()
    {
        $this->_retvalue = 'array(' . $this->yystack[$this->yyidx + - 1]->minor . ')';
    }

    #line 1273 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r179()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . ',' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1281 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r181()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 2]->minor . '=>' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1285 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r182()
    {
        $this->_retvalue = '\'' . $this->yystack[$this->yyidx + - 2]->minor . '\'=>' . $this->yystack[$this->yyidx + 0]->minor;
    }

    #line 1301 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r185()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor->to_smarty_php();
    }

    #line 1306 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r186()
    {
        $this->yystack[$this->yyidx + - 1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
        $this->_retvalue = $this->yystack[$this->yyidx + - 1]->minor;
    }

    #line 1311 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r187()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Dq($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1315 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r188()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)' . $this->yystack[$this->yyidx + - 1]->minor);
    }

    #line 1323 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r190()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)$_smarty_tpl->tpl_vars[\'' . substr($this->yystack[$this->yyidx + 0]->minor, 1) . '\']->value');
    }

    #line 1331 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r192()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)(' . $this->yystack[$this->yyidx + - 1]->minor . ')');
    }

    #line 1335 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r193()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    #line 1339 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r194()
    {
        $this->_retvalue = new Smarty_Internal_ParseTree_DqContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        if ($this->yyTraceFILE && $yyruleno >= 0 && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n", $this->yyTracePrompt, $yyruleno, self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (isset(self::$yyReduceMap[$yyruleno])) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno][0];
        $yysize = self::$yyRuleInfo[$yyruleno][1];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i --) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx ++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
        #line 183 "../smarty/lexer/smarty_internal_templateparser.y"

        $this->internalError = true;
        $this->yymajor = $yymajor;
        $this->compiler->trigger_template_error();
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        #line 176 "../smarty/lexer/smarty_internal_templateparser.y"

        $this->successful = !$this->internalError;
        $this->internalError = false;
        $this->retvalue = $this->_retvalue;
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = - 1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            $this->yystack[] = $x;
        }
        $yyendofinput = ($yymajor == 0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n", $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL && !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt --;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n", $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n", $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE) {
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor == 0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}

